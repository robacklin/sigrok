#!/bin/sh
##
## This file is part of the sigrok-util project.
##
## Copyright (C) 2013-2014 Uwe Hermann <uwe@hermann-uwe.de>
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
##

set -e

# Build target: "i686" (32bit) or "x86_64" (64bit).
TARGET="i686"

# The path where your MXE directory is located.
MXE=$HOME/mxe-git

# The path where the cross-compiled packages will be installed.
PREFIX=$HOME/sr_mingw

# The path where to download files to and where to build packages.
BUILDDIR=./build

# Edit this to control verbose build output.
# V="V=1 VERBOSE=1"

# Edit this to enable/disable/modify parallel compiles.
PARALLEL="-j 2"

# You usually don't need to change anything below this line.

# -----------------------------------------------------------------------------

SF_MIRROR=switch.dl.sourceforge.net

WGET="wget -c --quiet"
GIT_CLONE="git clone --depth=1"

# -----------------------------------------------------------------------------

# We need to find tools in the toolchain.
export PATH=$MXE/usr/bin:$PATH

TOOLCHAIN_TRIPLET="$TARGET-w64-mingw32.static"

P="$PREFIX/lib/pkgconfig"
P2="$MXE/usr/$TOOLCHAIN_TRIPLET/lib/pkgconfig"
C="--host=$TOOLCHAIN_TRIPLET --prefix=$PREFIX"
CM="-DCMAKE_TOOLCHAIN_FILE=$MXE/usr/$TOOLCHAIN_TRIPLET/share/cmake/mxe-conf.cmake"
L="--disable-shared --enable-static"

if [ $TARGET = "i686" ]; then
	export PKG_CONFIG_PATH_i686_w64_mingw32_static="$P:$P2"
else
	export PKG_CONFIG_PATH_x86_64_w64_mingw32_static="$P:$P2"
fi

# Remove build directory contents (if any) and create a new build dir.
rm -rf $BUILDDIR
mkdir $BUILDDIR
cd $BUILDDIR

# -----------------------------------------------------------------------------

mkdir -p $PREFIX

# Cross-compiling Python is highly non-trivial, so we avoid it for now.
# The download below is a repackaged tarball of the official Python 3.2.3 MSI
# installer for Windows:
#   - https://www.python.org/ftp/python/3.2.3/python-3.2.3.msi
#   - https://www.python.org/ftp/python/3.2.3/python-3.2.3.amd64.msi
# The MSI file has been installed on a Windows box and then c:\Python32\libs
# and c:\Python32\include have been stored in the Python32_*.tar.gz tarball.
$WGET http://www.sigrok.org/tmp/Python32_$TARGET.tar.gz -O $PREFIX/Python32.tar.gz
tar xzf $PREFIX/Python32.tar.gz -C $PREFIX

# Create a dummy python3.pc file so that pkg-config finds Python 3.
mkdir -p $PREFIX/lib/pkgconfig
cat >$PREFIX/lib/pkgconfig/python3.pc <<EOF 
prefix=$PREFIX
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include
Name: Python
Description: Python library
Version: 3.2
Libs: -L$PREFIX/Python32/libs -lpython32
Cflags: -I$PREFIX/Python32/include
EOF

# The python32.dll and python32.zip files will be shipped in the NSIS
# Windows installers (required for protocol decoding to work).
# The file python32.dll (NOT the same as python3.dll) is copied from an
# installed Python 3.2.3 (see above) from c:\Windows\system32\python32.dll.
# The file python32.zip contains all files from the 'DLLs', 'Lib', and 'libs'
# subdirectories from an installed Python on Windows (c:\python32), i.e. some
# libraries and all Python stdlib modules.
$WGET http://www.sigrok.org/tmp/python32_$TARGET.dll -O $PREFIX/python32.dll
$WGET http://www.sigrok.org/tmp/python32_$TARGET.zip -O $PREFIX/python32.zip

# Zadig (we ship this with frontends for easy driver switching).
$WGET http://zadig.akeo.ie/downloads/zadig.exe -O $PREFIX/zadig.exe
$WGET http://zadig.akeo.ie/downloads/zadig_xp.exe -O $PREFIX/zadig_xp.exe

# libserialport
$GIT_CLONE git://sigrok.org/libserialport
cd libserialport
./autogen.sh
./configure $C $L
make $PARALLEL $V
make install $V
cd ..

# libsigrok
$GIT_CLONE git://sigrok.org/libsigrok
cd libsigrok
patch -p1 < ../../libsigrok_firmwaredir.patch
./autogen.sh
./configure $C $L
make $PARALLEL $V
make install $V
cd ..

# libsigrokdecode
$GIT_CLONE git://sigrok.org/libsigrokdecode
cd libsigrokdecode
./autogen.sh
patch -p1 < ../../srd_decodersdir.patch
./configure $C $L
make $PARALLEL $V
make install $V
cd ..

# sigrok-firmware
$GIT_CLONE git://sigrok.org/sigrok-firmware
cd sigrok-firmware
./autogen.sh
# Nothing gets cross-compiled here, we just need 'make install' basically.
./configure --prefix=$PREFIX
make install $V
cd ..

# sigrok-firmware-fx2lafw
$GIT_CLONE git://sigrok.org/sigrok-firmware-fx2lafw
cd sigrok-firmware-fx2lafw
./autogen.sh
# We're building the fx2lafw firmware on the host, no need to cross-compile.
./configure --prefix=$PREFIX
make $PARALLEL $V
make install $V
cd ..

# sigrok-dumps
$GIT_CLONE git://sigrok.org/sigrok-dumps
cd sigrok-dumps
make install DESTDIR=$PREFIX/share/sigrok-dumps $V
cd ..

# sigrok-cli
$GIT_CLONE git://sigrok.org/sigrok-cli
cd sigrok-cli
./autogen.sh
./configure $C
make $PARALLEL $V
make install $V
makensis -DHOME=$HOME contrib/sigrok-cli_cross.nsi
cd ..

# PulseView
$GIT_CLONE git://sigrok.org/pulseview
cd pulseview
cmake $CM -DCMAKE_INSTALL_PREFIX:PATH=$PREFIX -DDISABLE_WERROR=y -DENABLE_TESTS=y .
make $PARALLEL $V
make install/strip $V
makensis -DHOME=$HOME contrib/pulseview_cross.nsi
cd ..

